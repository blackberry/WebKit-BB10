#!/usr/bin/perl -w

# Copyright (C) 2006, 2007, 2008, 2009 Apple Inc.  All rights reserved.
# Copyright (C) 2009 Torch Mobile Inc. All rights reserved.
# Copyright (C) Research in Motion Inc. 2010 All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
# 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Script to generate build information file

use strict;
use Compress::Zlib;
use File::Basename;
use File::Find;

sub usage
{
    print "Usage: <output directory> <input files>\n";
    exit 1;
}

sub fail
{
    print "Inspector generation failed.";
    exit 1;
}

# Ensure we have our input and output parameters
if (!$#ARGV >= 1) {
    usage();
}

my $outputdir = $ARGV[0];
shift;

# Ensure we can open the output files in the present directory
my $cppfile = "$outputdir/InspectorFrontEndResources.cpp";
my $hppfile = "$outputdir/InspectorFrontEndResources.h";
open (CPPFILE, ">$cppfile") or die "Could not open $cppfile for writing.";
open (HPPFILE, ">$hppfile") or die "Could not open $hppfile for writing.";

# Cache the disclaimer for both files
my $disclaimer =
"/*
 * THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 *
 * Copyright (C) Research in Motion Inc. 2010 All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY RESEARCH IN MOTION INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */\n\n";


# Print the disclaimer and header syntax for the cpp and h files
# before we go into the main loop that adds the data into arrays
#open CPPFILE, ">$cppfile" or die;
print CPPFILE $disclaimer;
print CPPFILE <<ENDHEADER;
#include <string.h>
#include "InspectorFrontEndResources.h"

namespace BlackBerry {

namespace Runtime {

ENDHEADER

#open HPPFILE, ">$hppfile" or die;
print HPPFILE $disclaimer;
print HPPFILE <<ENDHEADER;
#ifndef INSPECTOR_FRONT_END_H
#define INSPECTOR_FRONT_END_H

namespace BlackBerry {

namespace Runtime {

const unsigned char* web_inspector_resource_find(char* uri, int* size);

ENDHEADER

# Leverage the Find technique to recursively decend through
# the folder hierarchy and obtain all the resources we need

my @inspector_front_end_files;
my $frontendfile;
my $gzfile = 'temp.gz';
my $getter = "const unsigned char* web_inspector_resource_find(char* uri, int* size) {\n\n";

#find sub {
#     return if -d;
#     push @inspector_front_end_files, $File::Find::name;
#     }, $inputdir;

for my $path ( @ARGV ) {

    print "Gzip and Resource Wrap: $path.\n";
    open (FRONTENDFILE, $path);

    # Gzip the contents of the input file
    my $buf;
    my $gz = gzopen($gzfile, "wb");
    if (! $gz) {
       print "Unable to write $gzfile $!\n";
       fail;
    }
    else {
       while (my $by = sysread (FRONTENDFILE, $buf, 4096)) {
          if (! $gz->gzwrite($buf)) {
             print "Zlib error writing to $gzfile: $gz->gzerror\n";
             fail;
          }
       }
       $gz->gzclose();
    }

    my($basename, $directories, $suffix) = fileparse($path);
    # Leverage reswrap to encode the gzipped contents into a char array
    # We need to replace periods with underscores so our code compiles
    my $chararrayidentifier = $basename;
    $chararrayidentifier =~ s/\./_/g;
    $chararrayidentifier = uc( $chararrayidentifier );

    my $reswrapcommand = "reswrap -z -r $chararrayidentifier $gzfile ";
    my @reswrap = `$reswrapcommand`;

    # Take each line in turn, and add it to the cpp file
    foreach my $line ( @reswrap ) {
        next if ( index( $line, "reswrap" ) != -1 );

        # If the line contains "=", we will carve it up to properly
        # declare it in both the h and cpp files.
        if ( index( $line, "=" ) != -1 ) {
            # We replace every folder slash with three underscores to reduce
            # the likelihood of a collision with file extensions.
            $directories =~ s/.*(front-end|generated)\///;
            my $relativeDirectory = "\/" . $directories;

            $directories =~ s/\//___/;
            $directories =~ s/\\/___/;
            $directories = uc ( $directories );

            my $type = "const unsigned char ";
            my $identifier = substr( $line, length($type), rindex( $line, "=" ) - length($type) );

            print CPPFILE $type.$directories.$identifier." = {\n";
            print HPPFILE "extern ".$type.$directories.$identifier.";\n";

            $getter .= "    if (strcmp(uri, \"" . $relativeDirectory . $basename . "\") == 0) {\n";
            $getter .= "        *size = sizeof(" . $directories . substr($identifier, 0, index( $identifier, "[" )) . ");\n";
            $getter .= "        return " . $directories . substr($identifier, 0, index( $identifier, "[" )) . ";\n";
            $getter .= "    }\n";
        } else {
            # All other lines are just printed directly to the cpp file
            print CPPFILE "$line";
        }
    }

    close FRONTENDFILE;
}

# Delete the temporary gzip file and finish of the cpp and h files
unlink( $gzfile );
print CPPFILE $getter;
print CPPFILE "    return 0;\n}\n";
print CPPFILE "\n}\n}\n";
print HPPFILE "\n}\n}\n\n#endif\n";

print "Gzip and Resource Wrap successful!";
exit 0;
